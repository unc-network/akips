# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # python -m poetry run flake8 . --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # python -m poetry run flake8 . --exclude .venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        poetry run flake8 . --exclude .venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # python -m poetry run python -m pytest -v tests
        poetry run python -m pytest -v tests
    
  # Release:
  #   needs: Quality
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.Quality.result == 'success'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Semantic Release
  #       run: |
  #         pip install python-semantic-release
  #         git config user.name github-actions
  #         git config user.email github-actions@github.com
  #         semantic-release publish